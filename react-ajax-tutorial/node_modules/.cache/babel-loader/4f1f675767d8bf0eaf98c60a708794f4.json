{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ZB-PC079\\\\Desktop\\\\VELOPERT\\\\react-ajax-tutorial\\\\src\\\\containers\\\\PostContainer\\\\PostContainer.js\";\nimport React, { Component } from 'react';\nimport { PostWrapper, Navigate, Post } from '../../components';\nimport * as service from '../../services/post';\n\nclass PostContainer extends Component {\n  constructor(props) {\n    super(); // initializes component state\n\n    this.fetchPostInfo = async postId => {\n      this.setState({\n        fetching: true // requesting..\n\n      }); // wait for two promises\n\n      const info = await Promise.all([service.getPost(postId), service.getComments(postId)]); // Object destructuring Syntax,\n      // takes out required values and create references to them\n\n      const _info$0$data = info[0].data,\n            title = _info$0$data.title,\n            body = _info$0$data.body;\n      const comments = info[1].data;\n      this.setState({\n        postId,\n        post: {\n          title,\n          body\n        },\n        comments,\n        fetching: false // done!\n\n      });\n    };\n\n    this.state = {\n      postId: 1,\n      fetching: false,\n      // tells whether the request is waiting for response or not\n      post: {\n        title: null,\n        body: null\n      },\n      comments: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPostInfo(1);\n  }\n\n  render() {\n    const _this$state = this.state,\n          postId = _this$state.postId,\n          fetching = _this$state.fetching,\n          post = _this$state.post,\n          comments = _this$state.comments;\n    return React.createElement(PostWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Navigate, {\n      postId: postId,\n      disabled: fetching,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Post, {\n      title: post.title,\n      body: post.body,\n      comments: comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PostContainer;","map":{"version":3,"sources":["C:\\Users\\ZB-PC079\\Desktop\\VELOPERT\\react-ajax-tutorial\\src\\containers\\PostContainer\\PostContainer.js"],"names":["React","Component","PostWrapper","Navigate","Post","service","PostContainer","constructor","props","fetchPostInfo","postId","setState","fetching","info","Promise","all","getPost","getComments","data","title","body","comments","post","state","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,IAAhC,QAA4C,kBAA5C;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;;AAEA,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AAEpCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,YADe,CAEf;;AAFe,SAmBnBC,aAnBmB,GAmBH,MAAOC,MAAP,IAAkB;AAEhC,WAAKC,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAE,IADA,CACK;;AADL,OAAd,EAFgC,CAMhC;;AACA,YAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC3BV,OAAO,CAACW,OAAR,CAAgBN,MAAhB,CAD2B,EAE3BL,OAAO,CAACY,WAAR,CAAoBP,MAApB,CAF2B,CAAZ,CAAnB,CAPgC,CAYhC;AACA;;AAbgC,2BAcVG,IAAI,CAAC,CAAD,CAAJ,CAAQK,IAdE;AAAA,YAczBC,KAdyB,gBAczBA,KAdyB;AAAA,YAclBC,IAdkB,gBAclBA,IAdkB;AAgBhC,YAAMC,QAAQ,GAAGR,IAAI,CAAC,CAAD,CAAJ,CAAQK,IAAzB;AAEA,WAAKP,QAAL,CAAc;AACVD,QAAAA,MADU;AAEVY,QAAAA,IAAI,EAAE;AACFH,UAAAA,KADE;AAEFC,UAAAA;AAFE,SAFI;AAMVC,QAAAA,QANU;AAOVT,QAAAA,QAAQ,EAAE,KAPA,CAOM;;AAPN,OAAd;AAUH,KA/CoB;;AAGf,SAAKW,KAAL,GAAa;AACTb,MAAAA,MAAM,EAAE,CADC;AAETE,MAAAA,QAAQ,EAAE,KAFD;AAEQ;AACjBU,MAAAA,IAAI,EAAE;AACFH,QAAAA,KAAK,EAAE,IADL;AAEFC,QAAAA,IAAI,EAAE;AAFJ,OAHG;AAOTC,MAAAA,QAAQ,EAAE;AAPD,KAAb;AASH;;AAGDG,EAAAA,iBAAiB,GAAG;AAClB,SAAKf,aAAL,CAAmB,CAAnB;AACD;;AAgCDgB,EAAAA,MAAM,GAAG;AAAA,wBACoC,KAAKF,KADzC;AAAA,UACAb,MADA,eACAA,MADA;AAAA,UACQE,QADR,eACQA,QADR;AAAA,UACkBU,IADlB,eACkBA,IADlB;AAAA,UACwBD,QADxB,eACwBA,QADxB;AAGP,WACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,MAAM,EAAEX,MADZ;AAEI,MAAA,QAAQ,EAAEE,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI,oBAAC,IAAD;AACI,MAAA,KAAK,EAAEU,IAAI,CAACH,KADhB;AAEI,MAAA,IAAI,EAAEG,IAAI,CAACF,IAFf;AAGI,MAAA,QAAQ,EAAEC,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AAaH;;AAnEqC;;AAsEtC,eAAef,aAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { PostWrapper, Navigate, Post } from '../../components'\r\nimport * as service from '../../services/post'\r\n\r\nclass PostContainer extends Component {\r\n\r\n  constructor(props) {\r\n      super();\r\n      // initializes component state\r\n      this.state = {\r\n          postId: 1,\r\n          fetching: false, // tells whether the request is waiting for response or not\r\n          post: {\r\n              title: null,\r\n              body: null\r\n          },\r\n          comments: []\r\n      };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.fetchPostInfo(1);\r\n  }\r\n\r\n  fetchPostInfo = async (postId) => {\r\n        \r\n    this.setState({\r\n        fetching: true // requesting..\r\n    });\r\n\r\n    // wait for two promises\r\n    const info = await Promise.all([\r\n        service.getPost(postId),\r\n        service.getComments(postId)\r\n    ]);\r\n    \r\n    // Object destructuring Syntax,\r\n    // takes out required values and create references to them\r\n    const {title, body} = info[0].data; \r\n                                        \r\n    const comments = info[1].data;\r\n\r\n    this.setState({\r\n        postId,\r\n        post: {\r\n            title, \r\n            body\r\n        },\r\n        comments,\r\n        fetching: false // done!\r\n    });\r\n\r\n}\r\n\r\n  render() {\r\n    const {postId, fetching, post, comments} = this.state;\r\n\r\n    return (\r\n        <PostWrapper>\r\n            <Navigate \r\n                postId={postId}\r\n                disabled={fetching}\r\n            />\r\n            <Post\r\n                title={post.title}\r\n                body={post.body}\r\n                comments={comments}\r\n            />\r\n        </PostWrapper>\r\n    );\r\n}\r\n}\r\n\r\nexport default PostContainer;"]},"metadata":{},"sourceType":"module"}